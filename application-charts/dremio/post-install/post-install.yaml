apiVersion: batch/v1
kind: Job
metadata:
  name: dremio-post-install
  namespace: data-lakehouse
spec:
  template:
    spec:
      initContainers:
        - name: wait-for-dremio
          image: alpine:3.14
          command: ["/bin/sh", "-c"]
          args:
            - |
              apk add --no-cache curl && \
              until curl -sSf "http://dremio:9047" > /dev/null; do
                echo "Waiting for Dremio to be ready...";
                sleep 5;
              done
      containers:
        - name: dremio-post-install
          image: alpine:3.14
          command: ["/bin/sh", "-c"]
          args:
            - |
              apk add --no-cache curl sed jq && \
              sleep 60s && \
              # Authenticate as admin
              response=$(curl -s -X POST "http://dremio:9047/apiv2/login" \
                --header "Content-Type: application/json" \
                --data-raw "{
                  \"userName\": \"admin\",
                  \"password\": \"Pa22word\"
                }") && \
              token=$(echo "$response" | sed -n 's/.*\"token\":\"\([^\"]*\)\".*/\1/p') && \
              echo "Admin token: $token" && \

              # Add Nessie catalog source
              response=$(curl -X POST "http://dremio:9047/api/v3/catalog" \
                --header "Authorization: Bearer $token" \
                --header "Content-Type: application/json" \
                --data-raw "{
                    \"entityType\": \"source\",
                    \"config\": {
                        \"nessieEndpoint\": \"http://nessie-1:19120/api/v2\",
                        \"nessieAuthType\": \"NONE\",
                        \"asyncEnabled\": true,
                        \"isCachingEnabled\": true,
                        \"maxCacheSpacePct\": 100,
                        \"credentialType\": \"ACCESS_KEY\",
                        \"awsAccessKey\": \"minio-admin\",
                        \"awsAccessSecret\": \"Pa22word22\",
                        \"awsRootPath\": \"/warehouse\",
                        \"propertyList\": [
                            {\"name\": \"fs.s3a.path.style.access\", \"value\": \"true\"},
                            {\"name\": \"fs.s3a.endpoint\", \"value\": \"dremio-minio:9000\"},
                            {\"name\": \"dremio.s3.compat\", \"value\": \"true\"}
                        ],
                        \"secure\": false
                    },
                    \"name\": \"nessie-1\",
                    \"type\": \"NESSIE\"
                }") && \
              echo "Nessie Source Response: $response" && \

              # Add S3-compatible storage source (MinIO)
              response=$(curl -X POST "http://dremio:9047/api/v3/source" \
                --header "Authorization: Bearer $token" \
                --header "Content-Type: application/json" \
                --data-raw "{
                    \"entityType\": \"source\",
                    \"name\": \"upload\",
                    \"type\": \"S3\",
                    \"config\": {
                        \"accessKey\": \"minio-admin\",
                        \"accessSecret\": \"Pa22word22\",
                        \"rootPath\": \"/upload\",
                        \"secure\": false,
                        \"compatibilityMode\": true,
                        \"propertyList\": [
                            {\"name\": \"fs.s3a.endpoint\", \"value\": \"dremio-minio:9000\"},
                            {\"name\": \"fs.s3a.path.style.access\", \"value\": \"true\"}
                        ]
                    }
                }") && \
              echo "MinIO Source Response: $response" && \

              # Create Power BI space
              response=$(curl -X POST "http://dremio:9047/api/v3/catalog" \
                  --header "Authorization: Bearer $token" \
                  --header "Content-Type: application/json" \
                  --data-raw "{
                      \"entityType\": \"space\",
                      \"name\": \"Power BI\"
                  }") && \
              echo "Power BI Space Response: $response" && \

              # Define users to be created
              users='[
                {
                  "name": "mbeltran",
                  "firstName": "Marcos",
                  "lastName": "Yepes-Beltran",
                  "email": "marcos.yepesbeltran@gainwelltechnologies.com"
                },
                {
                  "name": "jcav",
                  "firstName": "Justin",
                  "lastName": "Cavanaugh",
                  "email": "justin.cavanaugh@gainwelltechnologies.com"
                },
                {
                  "name": "jsanders",
                  "firstName": "Jennifer",
                  "lastName": "Sanders",
                  "email": "jennifer.sanders@gainwelltechnologies.com"
                },
                {
                  "name": "kmelton",
                  "firstName": "Kaelyn",
                  "lastName": "Melton",
                  "email": "kaelyn.dobbins@gainwelltechnologies.com"
                },
                {
                  "name": "tgriggs",
                  "firstName": "Tyler",
                  "lastName": "Griggs",
                  "email": "tyler.griggs@gainwelltechnologies.com"
                },
                {
                  "name": "jyorko",
                  "firstName": "Josh",
                  "lastName": "Yorko",
                  "email": "joshua.yorko@gainwelltechnologies.com"
                }
              ]' && \
              
              # Loop to create each user with specified roles
              echo "$users" | jq -c '.[]' | while read user; do
                response=$(curl -s -X POST "http://dremio:9047/api/v3/user" \
                  --header "Authorization: Bearer $token" \
                  --header "Content-Type: application/json" \
                  --data-raw "$user") && \
                if echo "$response" | grep -q '"errorMessage"'; then
                  echo "Failed to create user: $(echo "$user" | jq -r '.name')";
                  echo "Error: $(echo "$response" | jq -r '.errorMessage')";
                else
                  echo "Successfully created user: $(echo "$user" | jq -r '.name')";
                fi;
              done
      restartPolicy: OnFailure
